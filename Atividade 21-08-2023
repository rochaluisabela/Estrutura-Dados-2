using System;
using System.Collections.Generic;

class Data
{
    private int dia;
    private int mes;
    private int ano;

    public void setData(int dia, int mes, int ano)
    {
        this.dia = dia;
        this.mes = mes;
        this.ano = ano;
    }

    public override string ToString()
    {
        return $"{dia:D2}/{mes:D2}/{ano:D4}";
    }
}

class Telefone
{
    private string tipo;
    private string numero;
    private bool principal;

    // Propriedades
    public string Tipo { get => tipo; set => tipo = value; }
    public string Numero { get => numero; set => numero = value; }
    public bool Principal { get => principal; set => principal = value; }
}

class Contato
{
    private string email;
    private string nome;
    private Data dtNasc;
    private List<Telefone> telefones = new List<Telefone>();

    // Construtor
    public Contato(string email, string nome, Data dtNasc)
    {
        this.email = email;
        this.nome = nome;
        this.dtNasc = dtNasc;
    }

    public int getIdade()
    {
        // Implementar cálculo da idade com base na data de nascimento
        return 0;
    }

    public void adicionarTelefone(Telefone t)
    {
        telefones.Add(t);
    }

    public string getTelefonePrincipal()
    {
        foreach (Telefone t in telefones)
        {
            if (t.Principal)
                return t.Numero;
        }
        return "Nenhum telefone principal encontrado.";
    }

    public override string ToString()
    {
        string telefonePrincipal = getTelefonePrincipal();
        return $"Nome: {nome}\nEmail: {email}\nData de Nascimento: {dtNasc}\nTelefone Principal: {telefonePrincipal}";
    }

    public override bool Equals(object obj)
    {
        if (obj == null || GetType() != obj.GetType())
            return false;

        Contato other = (Contato)obj;
        return this.email == other.email;
    }
}

class Contatos
{
    private List<Contato> agenda = new List<Contato>();

    public bool adicionar(Contato c)
    {
        if (pesquisar(c) == null)
        {
            agenda.Add(c);
            return true;
        }
        return false;
    }

    public Contato pesquisar(Contato c)
    {
        foreach (Contato contato in agenda)
        {
            if (contato.Equals(c))
                return contato;
        }
        return null;
    }

    public bool alterar(Contato c)
    {
        Contato contato = pesquisar(c);
        if (contato != null)
        {
            // Implementar lógica para atualizar o contato
            return true;
        }
        return false;
    }

    public bool remover(Contato c)
    {
        Contato contato = pesquisar(c);
        if (contato != null)
        {
            agenda.Remove(contato);
            return true;
        }
        return false;
    }

    public void listar()
    {
        foreach (Contato c in agenda)
        {
            Console.WriteLine(c);
            Console.WriteLine("================================");
        }
    }
}

class Program
{
    static void Main(string[] args)
    {
        Contatos contatos = new Contatos();

        while (true)
        {
            Console.WriteLine("================================");
            Console.WriteLine("0. Sair");
            Console.WriteLine("1. Adicionar contato");
            Console.WriteLine("2. Adicionar telefone no contato");
            Console.WriteLine("3. Pesquisar contato");
            Console.WriteLine("4. Alterar contato");
            Console.WriteLine("5. Remover contato");
            Console.WriteLine("6. Listar contatos");
            Console.WriteLine("================================");

            int opcao = Convert.ToInt32(Console.ReadLine());

            switch (opcao)
            {
                case 0:
                    Console.WriteLine("Saindo...");
                    return;
                case 1:
                    // Implementar a adição de um novo contato
                    break;
                case 2:
                    // Implementar a adição de telefone a um contato
                    break;
                case 3:
                    // Implementar a pesquisa de um contato
                    break;
                case 4:
                    // Implementar a alteração de um contato
                    break;
                case 5:
                    // Implementar a remoção de um contato
                    break;
                case 6:
                    contatos.listar();
                    break;
                default:
                    Console.WriteLine("Opção inválida.");
                    break;
            }
        }
    }
}
