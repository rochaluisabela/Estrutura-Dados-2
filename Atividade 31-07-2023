#Aluna Isabela Rocha CB3021599

#include <iostream>
#include <string>
using namespace std;

class Venda {
private:
    int qtde;
    double valor;

public:
    Venda(int qtde, double valor) : qtde(qtde), valor(valor) {}

    double valorMedio() {
        return valor / qtde;
    }
};

class Vendedor {
private:
    int id;
    string nome;
    double percComissao;
    Venda asVendas[31];

public:
    Vendedor(int id, string nome, double percComissao) : id(id), nome(nome), percComissao(percComissao) {}

    void registrarVenda(int dia, Venda venda) {
        asVendas[dia] = venda;
    }

    double valorVendas() {
        double total = 0;
        for (const auto& venda : asVendas) {
            total += venda.valor;
        }
        return total;
    }

    double valorComissao() {
        return valorVendas() * (percComissao / 100);
    }
};

class Vendedores {
private:
    Vendedor osVendedores[10];
    int max;
    int qtde;

public:
    Vendedores() : max(10), qtde(0) {}

    bool addVendedor(Vendedor v) {
        if (qtde >= max) {
            cout << "Não é possível adicionar mais vendedores. Limite atingido." << endl;
            return false;
        }
        osVendedores[qtde++] = v;
        return true;
    }

    bool delVendedor(Vendedor v) {
        if (v.valorVendas() > 0) {
            cout << "Não é possível excluir o vendedor. Existem vendas associadas a ele." << endl;
            return false;
        }
        int i = 0;
        while (i < qtde) {
            if (osVendedores[i].id == v.id) {
                for (int j = i; j < qtde - 1; j++) {
                    osVendedores[j] = osVendedores[j + 1];
                }
                qtde--;
                return true;
            }
            i++;
        }
        cout << "Vendedor não encontrado." << endl;
        return false;
    }

    Vendedor searchVendedor(Vendedor v) {
        for (int i = 0; i < qtde; i++) {
            if (osVendedores[i].id == v.id) {
                return osVendedores[i];
            }
        }
        return Vendedor(-1, "", 0);
    }

    void listarVendedores() {
        double totalVendas = 0;
        double totalComissao = 0;
        for (int i = 0; i < qtde; i++) {
            Vendedor v = osVendedores[i];
            cout << "Id: " << v.id << endl;
            cout << "Nome: " << v.nome << endl;
            cout << "Valor total das vendas: R$" << v.valorVendas() << endl;
            cout << "Valor da comissão devida: R$" << v.valorComissao() << endl;
            cout << endl;
            totalVendas += v.valorVendas();
            totalComissao += v.valorComissao();
        }
        cout << "Total de vendas: R$" << totalVendas << endl;
        cout << "Total de comissão devida: R$" << totalComissao << endl;
    }
};

int main() {
    Vendedores vendedores;
    int opcao;

    do {
        cout << "OPÇÕES:" << endl;
        cout << "0. Sair" << endl;
        cout << "1. Cadastrar vendedor" << endl;
        cout << "2. Consultar vendedor" << endl;
        cout << "3. Excluir vendedor" << endl;
        cout << "4. Registrar venda" << endl;
        cout << "5. Listar vendedores" << endl;
        cout << "Digite a opção desejada: ";
        cin >> opcao;

        switch (opcao) {
        case 0:
            cout << "Encerrando o programa." << endl;
            break;

        case 1: {
            int id;
            string nome;
            double percComissao;
            cout << "Digite o id do vendedor: ";
            cin >> id;
            cout << "Digite o nome do vendedor: ";
            cin.ignore();
            getline(cin, nome);
            cout << "Digite a porcentagem de comissão do vendedor: ";
            cin >> percComissao;
            Vendedor vendedor(id, nome, percComissao);
            if (vendedores.addVendedor(vendedor)) {
                cout << "Vendedor cadastrado com sucesso." << endl;
            }
            break;
        }

        case 2: {
            int id;
            cout << "Digite o id do vendedor que deseja consultar: ";
            cin >> id;
            Vendedor vendedor = vendedores.searchVendedor(Vendedor(id, "", 0));
            if (vendedor.id == -1) {
                cout << "Vendedor não encontrado." << endl;
            } else {
                cout << "Id: " << vendedor.id << endl;
                cout << "Nome: " << vendedor.nome << endl;
                cout << "Valor total das vendas: R$" << vendedor.valorVendas() << endl;
                cout << "Valor da comissão devida: R$" << vendedor.valorComissao() << endl;
                cout << "Valor médio das vendas diárias: R$" << vendedor.valorVendas() / 31.0 << endl;
            }
            break;
        }

        case 3: {
            int id;
            cout << "Digite o id do vendedor que deseja excluir: ";
            cin >> id;
            Vendedor vendedor = vendedores.searchVendedor(Vendedor(id, "", 0));
            if (vendedor.id == -1) {
                cout << "Vendedor não encontrado." << endl;
            } else {
                if (vendedores.delVendedor(vendedor)) {
                    cout << "Vendedor excluído com sucesso." << endl;
                }
            }
            break;
        }

        case 4: {
            int id, dia, qtde;
            double valor;
            cout << "Digite o id do vendedor que realizou a venda: ";
            cin >> id;
            Vendedor vendedor = vendedores.searchVendedor(Vendedor(id, "", 0));
            if (vendedor.id == -1) {
                cout << "Vendedor não encontrado." << endl;
            } else {
                cout << "Digite o dia da venda: ";
                cin >> dia;
                cout << "Digite a quantidade de vendas realizadas: ";
                cin >> qtde;
                cout << "Digite o valor total das vendas: ";
                cin >> valor;
                Venda venda(qtde, valor);
                vendedor.registrarVenda(dia, venda);
                cout << "Venda registrada com sucesso." << endl;
            }
            break;
        }

        case 5:
            vendedores.listarVendedores();
            break;

        default:
            cout << "Opção inválida. Digite um número válido." << endl;
            break;
        }
    } while (opcao != 0);

    return 0;
}
